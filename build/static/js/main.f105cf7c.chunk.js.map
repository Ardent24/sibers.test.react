{"version":3,"sources":["components/modules/sort-users.js","components/modules/localeStorageUsers.js","components/header/HeaderBtn.jsx","components/header/HeaderInput.jsx","components/header/Header.jsx","components/core/ContactsItem.jsx","components/core/Contacts.jsx","components/modals/ModalLabel.jsx","components/modals/ModalInput.jsx","components/modals/ModalGroup.jsx","components/modals/ModalFooter.jsx","components/modals/Modal.jsx","App.js","components/modules/request-users.js","index.js"],"names":["sortUsers","users","field","sort","a","b","localeStorageUsers","promise","LS_USERS","LS_NAME_TASKS","localStorage","getItem","setItem","JSON","stringify","usersString","parse","HeaderBtn","props","className","onClick","modalStatus","HeaderInp","type","placeholder","onChange","event","onChangeSearchUser","target","value","Header","listUsers","ContactsItem","USER","dataUser","templateBtn","changeModalContent","name","id","Contacts","data","map","user","i","arrayUsers","idUser","ModalLabel","infoGroup","ModalInput","textModal","modalContent","onBlur","valueInp","valueUpCase","toUpperCase","slice","onChangeNewUser","newUser","ModalGroup","ModalFooter","newListUsers","LOCALE_STORAGE","push","onChangeUsers","resetModal","Modal","useState","phone","email","setNewUser","changeClassWrap","classNames","active","isOpenModal","changeClassBox","titleModal","preventDefault","div","document","querySelector","App","setUsers","setOpenModal","setModalContent","searchUser","setSearchUser","useEffect","fetch","then","res","json","promiseUsers","filterUsers","filter","toLowerCase","includes","isOpen","editListUsers","search","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f105cf7c.chunk.js","sourcesContent":["const sortUsers = (users) => {\n  const byField = (field) => (a, b) => (a[field] > b[field] ? 1 : -1);\n\n  return users.sort(byField(\"name\"));\n};\n\nexport { sortUsers };\n","const localeStorageUsers = (promise) => {\n  const LS_USERS = promise;\n  const LS_NAME_TASKS = 'users';\n\n  if (!localStorage.getItem(LS_NAME_TASKS)) {\n    localStorage.setItem(LS_NAME_TASKS, JSON.stringify(LS_USERS));\n  }\n\n  const usersString = localStorage.getItem('users');\n  const parseUsers = JSON.parse(usersString);\n\n  return parseUsers;\n}\n\nexport {localeStorageUsers};","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nexport default function HeaderBtn(props) {\n  return (\n    <button\n      className=\"contacts-header__add\"\n      onClick={() => props.modalStatus(true)}\n    />\n  );\n}\n\nHeaderBtn.propTypes = {\n  modalStatus: PropTypes.func.isRequired\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction HeaderInp(props) {\n\n  const onChangeInp = (event) => props.onChangeSearchUser(event.target.value);\n\n  return (\n    <input\n      type=\"search\"\n      className=\"contacts-header__search\"\n      placeholder=\"Search...\"\n      onChange={onChangeInp}\n    />\n  );\n}\n\n\nHeaderInp.propTypes = {\n  listUsers: PropTypes.array,\n};\n\nexport default HeaderInp;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport HeaderBtn from \"./HeaderBtn\";\nimport HeaderInp from \"./HeaderInput\";\n\nexport default function Header(props) {\n  return (\n    <header className=\"contacts-header\">\n      <div className=\"contacts-header__wrapper\">\n        <h1 className=\"contacts-title\">Contacts</h1>\n        <HeaderBtn modalStatus={props.modalStatus} />\n        <HeaderInp\n          listUsers={props.listUsers}\n          onChangeSearchUser={props.onChangeSearchUser}\n        />\n      </div>\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  listUsers: PropTypes.array,\n  modalStatus: PropTypes.func.isRequired,\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ContactsItem = (props) => {\n  const USER = props.dataUser;\n  //const PREV_USER = props.listUsers[props.idUser - 1];\n\n  const onChangeDataModal = () => {\n    props.modalStatus(true);\n    props.changeModalContent(USER);\n  };\n\n  // const templateTitleBtn = (\n  //   <h2 className=\"contacts-content__title contacts-wrap\" key={USER.name.charAt(0)}>\n  //     {USER.name.charAt(0).toUpperCase()}\n  //   </h2>\n  // );\n\n  const templateBtn = (\n    <button\n      className={\"contacts-content__elem\"}\n      onClick={onChangeDataModal}\n      key={USER.id}\n    >\n      {USER.name}\n    </button>\n  );\n\n  const onChangeTemplate = () => {\n    return <>{templateBtn}</>\n    // if (PREV_USER === undefined) return null;\n    // // if (props.idUser === 1) return <>{templateTitleBtn}</>;\n    // if (USER.name.charAt(0) !== PREV_USER.name.charAt(0)) {\n    //   return (\n    //     <>\n    //       {templateTitleBtn}\n    //       {templateBtn}\n    //     </>\n    //   );\n    // } else {\n    //   return <>{templateBtn}</>;\n    // }\n  };\n\n  return <>{onChangeTemplate()}</>;\n};\n\nContactsItem.propTypes = {\n  dataUser: PropTypes.object,\n  idUser: PropTypes.number,\n  listUsers: PropTypes.array,\n  modalStatus: PropTypes.func.isRequired,\n  changeModalContent: PropTypes.func.isRequired,\n};\n\nexport default ContactsItem;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport ContactsItem from \"./ContactsItem\";\n\nconst Contacts = (props) => {\n  return (\n    <div className=\"contacts-wrapper\">\n      <div className=\"contacts-content\">\n        {props.data &&\n          props.data.map((user, i, arrayUsers) => (\n            <ContactsItem\n              dataUser={user}\n              idUser={i}\n              listUsers={arrayUsers}\n              modalStatus={props.modalStatus}\n              changeModalContent={props.changeModalContent}\n              key={i}\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nContacts.propTypes = {\n  dataUser: PropTypes.object,\n  idUser: PropTypes.number,\n  listUsers: PropTypes.array,\n  modalStatus: PropTypes.func.isRequired,\n  changeModalContent: PropTypes.func.isRequired,\n};\n\nexport default Contacts;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ModalLabel = (props) => (\n  <label className=\"contacts-modal__label\">{props.infoGroup}</label>\n);\n\nModalLabel.propTypes = {\n  infoGroup: PropTypes.string.isRequired,\n};\n\nexport default ModalLabel;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ModalInput = (props) => {\n  const textModal = props.modalContent\n    ? props.modalContent[props.infoGroup]\n    : `Enter your ${props.infoGroup}`;\n\n  const onChangeUserInfo = (event) => {\n    const valueInp = event.target.value;\n    let valueUpCase = \"\";\n\n    if (props.infoGroup === \"name\") {\n      valueUpCase = valueInp[0].toUpperCase() + valueInp.slice(1);\n    } else {\n      valueUpCase = event.target.value;\n    }\n\n    props.onChangeNewUser({\n      ...props.newUser,\n      [props.infoGroup]: valueUpCase,\n    });\n  };\n\n  return (\n    <input\n      type=\"text\"\n      className=\"contacts-modal__inp\"\n      onBlur={onChangeUserInfo}\n      placeholder={textModal}\n    />\n  );\n};\n\nModalInput.propTypes = { infoGroup: PropTypes.string.isRequired };\n\nexport default ModalInput;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport ModalLabel from \"./ModalLabel\";\nimport ModalInput from \"./ModalInput\";\n\nconst ModalGroup = (props) => {\n  return (\n    <div className=\"contacts-modal__group\">\n      <ModalLabel infoGroup={props.infoGroup} />\n      <ModalInput\n        modalContent={props.modalContent}\n        infoGroup={props.infoGroup}\n        onChangeNewUser={props.onChangeNewUser}\n        newUser={props.newUser}\n      />\n    </div>\n  );\n};\n\nModalGroup.propTypes = {\n  infoGroup: PropTypes.string.isRequired,\n  modalContent: PropTypes.func\n}\n\nexport default ModalGroup;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {sortUsers} from \"../modules/sort-users\";\n\nconst ModalFooter = (props) => {\n  const editModalContent = () => {\n    const newListUsers = [...props.listUsers, props.newUser];\n    const LOCALE_STORAGE = JSON.parse(localStorage.getItem(\"users\"));\n\n    LOCALE_STORAGE.push(props.newUser);\n    localStorage.setItem(\"users\", JSON.stringify(LOCALE_STORAGE));\n\n    props.onChangeUsers(sortUsers(newListUsers));\n    props.resetModal();\n  };\n\n  return (\n    <footer className=\"contacts-modal__footer\">\n      <button className=\"contacts-modal__closed\" onClick={editModalContent}>\n        OK\n      </button>\n    </footer>\n  );\n};\n\nModalFooter.propTypes = {\n  onChangeUsers: PropTypes.func,\n  listUsers: PropTypes.array,\n  newUser: PropTypes.object\n};\n\nexport default ModalFooter;","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nimport ModalGroup from \"./ModalGroup\";\nimport ModalFooter from \"./ModalFooter\";\n\nconst Modal = (props) => {\n  const [newUser, setNewUser] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\",\n  });\n  const onChangeNewUser = (dataUser) => setNewUser(dataUser);\n\n  const resetModal = () => {\n    props.modalStatus(false);\n    props.changeModalContent(null);\n  };\n  const outSideClick = (event) => {\n    event.preventDefault();\n    const div = document.querySelector(\".contacts-modal\");\n    if (event.target === div) resetModal();\n  };\n\n  const changeClassWrap = classNames(\"contacts-modal\", {\n    active: props.isOpenModal,\n  });\n  const changeClassBox = classNames(\"contacts-modal__wrapper\", {\n    active: props.isOpenModal,\n  });\n\n  const titleModal = props.modalContent\n    ? props.modalContent.name\n    : \"Add contact\";\n\n  return (\n    <div className={changeClassWrap} onClick={outSideClick}>\n      <div className={changeClassBox}>\n        <header className=\"contacts-modal__header\">\n          <h4 className=\"contacts-modal__title\">{titleModal}</h4>\n          <button className=\"contacts-modal__close\" onClick={resetModal}>\n            &times;\n          </button>\n        </header>\n        <main className=\"contacts-modal__main\">\n          <ModalGroup\n            modalContent={props.modalContent}\n            infoGroup=\"name\"\n            onChangeNewUser={onChangeNewUser}\n            newUser={newUser}\n          />\n          <ModalGroup\n            modalContent={props.modalContent}\n            infoGroup=\"phone\"\n            onChangeNewUser={onChangeNewUser}\n            newUser={newUser}\n          />\n          <ModalGroup\n            modalContent={props.modalContent}\n            infoGroup=\"email\"\n            onChangeNewUser={onChangeNewUser}\n            newUser={newUser}\n          />\n        </main>\n        <ModalFooter\n          newUser={newUser}\n          onChangeUsers={props.onChangeUsers}\n          resetModal={resetModal}\n          listUsers={props.listUsers}\n        />\n      </div>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  changeModalContent: PropTypes.func,\n  modalContent: PropTypes.func,\n  isOpenModal: PropTypes.bool,\n};\n\nexport default Modal;","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { requestUsers } from \"./components/modules/request-users\";\nimport { sortUsers } from \"./components/modules/sort-users\";\nimport { localeStorageUsers } from \"./components/modules/localeStorageUsers\";\n\nimport Header from \"./components/header/Header\";\nimport Contacts from \"./components/core/Contacts\";\nimport Modal from \"./components/modals/Modal\";\n\nexport default function App() {\n  const [users, setUsers] = useState(null);\n  const [isOpenModal, setOpenModal] = useState(false);\n  const [modalContent, setModalContent] = useState(null);\n  const [searchUser, setSearchUser] = useState(\"\");\n\n  useEffect(() => {\n    if (!users) {\n      (async function func() {\n        const promiseUsers = await requestUsers();\n        const LS_USERS = localeStorageUsers(promiseUsers);\n        setUsers(sortUsers(LS_USERS));\n      })();\n    } else {\n      setUsers(sortUsers(users));\n    }\n  }, [users]);\n\n  const filterUsers =\n    users &&\n    users.filter((user) => {\n      return user.name.toLowerCase().includes(searchUser.toLowerCase());\n    });\n\n  const onChangeSearchUser = (search) => setSearchUser(search);\n\n  const modalStatus = (isOpen) => setOpenModal(isOpen);\n\n  const changeModalContent = (changeModalContent) =>\n    setModalContent(changeModalContent);\n\n  const onChangeUsers = (editListUsers) => setUsers(editListUsers);\n\n  return (\n    <div className=\"contacts\">\n      <Header\n        modalStatus={modalStatus}\n        listUsers={filterUsers}\n        onChangeUsers={onChangeUsers}\n        onChangeSearchUser={onChangeSearchUser}\n      />\n      <Contacts\n        data={filterUsers}\n        modalStatus={modalStatus}\n        changeModalContent={changeModalContent}\n      />\n      <Modal\n        isOpenModal={isOpenModal}\n        modalStatus={modalStatus}\n        changeModalContent={changeModalContent}\n        modalContent={modalContent}\n        onChangeUsers={onChangeUsers}\n        listUsers={filterUsers}\n      />\n    </div>\n  );\n}\n\nApp.propTypes = {\n  modalStatus: PropTypes.func,\n  listUsers: PropTypes.array,\n  data: PropTypes.object,\n  changeModalContent: PropTypes.func,\n  isOpenModal: PropTypes.func,\n  modalContent: PropTypes.func,\n};\n","const requestUsers = () => {\n  return fetch(\"https://demo.sibers.com/users\").then((res) => res.json());\n};\n\nexport { requestUsers };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./styles/main.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}